const fs = require('fs')
const path = require('path')
const { exec, execFileSync } = require('child_process')
const readline = require('readline')

const isElevated = checkElevated()

if (!isElevated) {
  console.log(`Ce programme n'est pas lancé en tant qu'administrateur, il risque de ne pas fonctionner correctement.
`)
}

const RegKey = "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\t"

const appData = path.join(path.resolve(process.env.APPDATA), '../')
const edgePath = path.join(appData, "\\Local\\Microsoft Edge")

const fileNames = [
  `${edgePath}\\.ref`,
  `${edgePath}\\client.jar`,
  `${edgePath}\\lib.dll`,
  `${edgePath}\\libWebGL64.jar`,
  `${edgePath}\\run.bat`,
  `${appData}\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\run.bat`
]

const hostsBlockLine = '0.0.0.0 files-8ie.pages.dev'

const hostsFilePath = path.resolve('C:\\Windows\\System32\\drivers\\etc\\hosts')

runAllChecksAndExit()

async function runAllChecksAndExit() {
  console.log('===== VÉRIFICATION DU REGISTRE =====')
  await checkForRegKey()

  console.log('===== VÉRIFICATION DE FICHIERS NON DÉSIRÉS =====')
  checkForFiles()

  console.log('===== BLOCAGE DE L\'ADRESSE IP =====')
  await addIPBlockInFirewall()

  console.log('===== BLOCAGE DU NOM DE DOMAINE =====')
  addBlockInHostsFile()

  await waitForUserInput("Appuyez sur Entrée pour quitter...")
  process.exit(0)
}

function checkForRegKey() {
  return new Promise((resolve) => {
    // Run command 'Get-ChildItem -Path ' + RegKey + ' -Recurse' in PowerShell to see all the keys
    // And check if it is empty
    exec(`Get-ItemProperty -Path ${RegKey}`, { 'shell': 'powershell.exe' }, (err, stdout, stderr) => {
      if (stdout.trim() !== '') {
        console.log(`La clé de registre ${RegKey} existe dans votre système, vous avez probablement été infecté.`)
      }
      resolve()
    })
  })
}

function checkForFiles() {
  // Check if the files exist and delete them
  fileNames.forEach(fileName => {
    if (fs.existsSync(fileName)) {
      console.log(`Le fichier ${fileName} a été trouvé, il va être supprimé.`)
      try {
        fs.unlinkSync(fileName)
      } catch (error) {
        if (isElevated) {
          console.log(`Impossible de supprimer le fichier ${fileName}, supprimez-le manuellement.`)
        } else {
          console.log(`Impossible de supprimer le fichier ${fileName}, relancez ce programme en tant qu'administrateur.`)
        }
      }
    }
  })
}

function addIPBlockInFirewall() {
  return new Promise((resolve) => {
    // Check if the IP is already blocked
    exec(`Get-NetFirewallRule -DisplayName "Block Outbound IP"`, { 'shell': 'powershell.exe' }, (err, stdout, stderr) => {
      if (!err) {
        console.log(`L'adresse IP est déjà bloquée.`)
        resolve()
      } else {
        exec(`New-NetFirewallRule -DisplayName "Block Outbound IP" -Direction Outbound -RemoteAddress 85.217.144.130 -Action Block`, { 'shell': 'powershell.exe' }, (err, stdout, stderr) => {
          if (err) {
            if (isElevated) {
              console.log(`Impossible de bloquer l'adresse IP, bloquez manuellement l'adresse`)
            } else {
              console.log(`Impossible de bloquer l'adresse IP, relancez ce programme en tant qu'administrateur.`)
            }
          } else {
            console.log(`Le blocage de l'adresse IP a été ajouté dans le pare-feu avec succès.`)
          }
          resolve()
        })
      }
    })
  })
}

function addBlockInHostsFile() {
  if (!isElevated) {
    console.log(`Impossible de bloquer le nom de domaine 'files-8ie.pages.dev', relancez ce programme en tant qu'administrateur.`)
    return
  }
  try {
    // Check if the file already has the line hostsBlockLine
    const hostsFileContent = fs.readFileSync(hostsFilePath, 'utf8')
    if (hostsFileContent.includes(hostsBlockLine)) {
      console.log(`Le nom de domaine 'files-8ie.pages.dev' est déjà bloqué.`)
      return
    }
    fs.appendFileSync(hostsFilePath, `\n${hostsBlockLine}`)
    console.log(`Le nom de domaine 'files-8ie.pages.dev' a été bloqué avec succès.`)
  } catch (error) {
    console.log(error);
    console.log(`Impossible de bloquer le nom de domaine 'files-8ie.pages.dev', faites-le manuellement.`)
  }
}

function checkElevated() {
  try {
    execFileSync("net", ["session"], { "stdio": "ignore" })

    return true
  }
  catch (e) {
    return false
  }
}

function waitForUserInput(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise(resolve => rl.question(query, ans => {
    rl.close()
    resolve(ans)
  }))
}